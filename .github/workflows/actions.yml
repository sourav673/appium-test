name: Upload Preview APK

on:
  push:
    branches: [main]

jobs:
  build:
    name: Upload Preview APK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@v2
        with:
          working-directory: jni/deltachat-core-rust
      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: "temurin"

      - uses: android-actions/setup-android@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r27

      # - name: Compile core
      #   env:
      #     ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
      #   run: |
      #     export PATH="${PATH}:${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/bin/"
      #     scripts/install-toolchains.sh && scripts/ndk-make.sh

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Build APK
        run: ./gradlew --no-daemon assembleGplayDebug

#      - name: Upload App to BrowserStack
#        run: |
#          curl -u "swa_TtVXzOfwV54:TgSazzF4ms6zyc1Cv7M7" \
#          -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
#          -F "file=@build/outputs/apk/gplay/debug/privitty-deltchat-android-gplay-debug-1.50.5.apk"

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-preview.apk
          path: "build/outputs/apk/gplay/debug/*.apk"


  setupAWS:
    name: Setup AWS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Test AWS CLI
        run: aws sts get-caller-identity

#  test:
#    name: Run Appium UI Tests
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          submodules: recursive
#
#      - name: Set up Java
#        uses: actions/setup-java@v3
#        with:
#          java-version: 17
#          distribution: "temurin"
#
#      - name: Set up Android SDK
#        uses: android-actions/setup-android@v3
#
#      - name: Set up Gradle cache
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#
#      - name: Download built APK
#        uses: actions/download-artifact@v4
#        with:
#          name: app-preview.apk
#          path: build/outputs/apk/gplay/debug/
#
#      - name: Set up Appium (Node.js & Appium CLI)
#        run: |
#          sudo apt update
#          sudo apt install -y nodejs npm
#          npm install -g appium
#
#      - name: Start Appium Server (in background)
#        run: nohup appium > appium.log 2>&1 &
#
#      - name: Run Appium Tests
#        working-directory: ./appium-tests
#        run: |
#          ./gradlew test --info
